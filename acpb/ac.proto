package acpb;

option optimize_for = LITE_RUNTIME;
option cc_generic_services = false;
option java_generic_services = false;
option py_generic_services = false;

// PUBLIC KEY // EC25519 DH
// This message handle public key requests:
// PK_GEN: generate an ephemeral public key
// PK_ADD: add an externally received ephemeral public key
// PK_LIST: list currently known ephemeral public key(s)
// PK_DEL: delete a currently stored ephemeral public key
message acPublicKeyMessageRequest {
    enum acPKReqMsgType {
        PK_GEN = 10; // request: type && my_nick && host && server && blob (input entropy) -> generate pubkey & store/update XXX: input entropy to use...
        PK_ADD = 11; // request: type && nick && host && server && blob  -> add or update a public key
        PK_LIST = 12; // request: type && [nick] && server         -> list the public nick/fp/timestamp
        PK_DEL = 13; // request: type && nick && server            -> delete the specific public key
    }
    required acPKReqMsgType type = 1;
    optional string nick = 2;
    optional string host = 4;
    required string server = 5;
    optional bytes blob = 3;
}

message acPublicKey {
    required string nick = 1;
    required bytes fp = 2;
    required int64 timestamp = 3;
    required string pubkey = 4;
    required bool haspriv = 5;
    optional string host = 6;
    optional string server = 7;
}

message acPublicKeyMessageResponse {
    enum acPKRespMsgType {
        PKR_GEN = 0; // response: type & bada 
        PKR_ADD = 1; // response: type & bada & error_code 
        PKR_LIST = 2; //response: type & bada & public_keys/error_code
        PKR_DEL = 3; // response: type & bada & error_code 
        PKR_ERR = 4; // response: type & bada & error_code & blob (error message)
    }

    required acPKRespMsgType type = 1;
    required bool bada = 2; // did it work or not
    optional sint32 error_code = 3;
    optional bytes blob = 4;
    repeated acPublicKey public_keys = 5;
}

//
//
//
// Key EXchange messages
//
//
//
message acKeyExchangeMessageRequest {
    enum acKXReqMsgType {
        KX_PACK = 20;       // request: type && peer_nick && channel && server (for hash datastruct)
        KX_UNPACK = 21;     // request: type && peer_nick && channel & blob && server (for hash datastruct)
    }
    required acKXReqMsgType type = 1;
    required string mynick = 2;
    required string peernick = 3;
    required string channel = 4;
    required string server = 5;
    optional bytes blob = 6;
}

message acKeyExchangeMessageResponse {
    enum acKXRespMsgType {
        KXR_PACK = 22;
        KXR_UNPACK = 23;
        KXR_ERR = 24;
    }
    required acKXRespMsgType type = 1;
    required bool bada = 2; // did it work or not
    required sint32 error_code = 6;
    optional bytes blob = 5;
    optional uint32 nonce = 7;
}


//
//
//
// Crypto Message
//
//
//
message acCipherTextMessageRequest {
    enum acCTReqMsgType {
        CT_SEAL = 30;
        CT_OPEN = 31;
        CT_ADD = 32; // request: type && channel && server && nick && blob (entropy)
    }
    required acCTReqMsgType type = 1;
    required string nick = 2;
    required string channel = 3;
    required string server = 4;
    required bytes blob = 5;
    optional string opt = 6; // will be used in case i need an optional information, in our case my Nick when i CTOPEN
}

message acCipherTextMessageResponse {
    enum acCTRespMsgType {
        CTR_SEAL = 32;
        CTR_OPEN = 33;
        CTR_ADD = 34;
        CTR_ERR = 35;
    }
    required acCTRespMsgType type = 1;
    required bool bada = 2; // did it work or not
    repeated bytes blob = 5;
    optional sint32 error_code = 6;
    optional uint32 nonce = 7;
}

//
//
//
// Control Message
//
//
//
message acControlMessageRequest {
    enum acCTLReqMsgType {
        CTL_PING = 40;
        CTL_SAVECTX = 41;
        CTL_LOADCTX = 42;
        CTL_VERSION = 43;
//        CTL_LOAD_AUTH = 43;
//        CTL_LOAD_RSA =
    }
    required acCTLReqMsgType type = 1;
    optional string password = 2;
    optional int64 timestamp = 3;
    //optional string filename = 2;
}

message acControlMessageResponse {
    enum acCTLRRespMsgType {
        CTLR_PONG = 50;
        CTLR_SAVECTX = 51;
        CTLR_LOADCTX = 52;
        CTLR_QUIT = 53;
    }
    required acCTLRRespMsgType type = 1;
    required bool bada = 2; // did it work or not
    optional sint32 error_code = 3;
    optional int64 timestamp = 4;
}




//
//
// The enveloppe Type
//
//
message ArseneCryptoMessage {
    enum acMessageType {
        AC_PK = 20;    // acPublicKeyMessageRequest / acPublicKeyMessageResponse
        AC_KEX = 21;   // done but not clean
        AC_CRYPTO = 22; // done but not clean
        AC_CTL = 23;  // Control MESSAGEs ( PING / CLEAR ALL / STATS )
        AC_QUIT = 24; // XXX TOREMOVE QUIT MESSAGE (moving to CTLR messages
        AC_ERROR = 25;
    }
    required acMessageType type = 40;
    required bytes blob = 41;
}

