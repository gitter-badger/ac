// Code generated by protoc-gen-go.
// source: ac.proto
// DO NOT EDIT!

/*
Package acpb is a generated protocol buffer package.

It is generated from these files:
	ac.proto

It has these top-level messages:
	AcPublicKeyMessageRequest
	AcPublicKey
	AcPublicKeyMessageResponse
	AcKeyExchangeMessageRequest
	AcKeyExchangeMessageResponse
	AcCipherTextMessageRequest
	AcCipherTextMessageResponse
	AcControlMessageRequest
	AcControlMessageResponse
	ArseneCryptoMessage
*/
package acpb

import proto "github.com/golang/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type AcPublicKeyMessageRequestAcPKReqMsgType int32

const (
	AcPublicKeyMessageRequest_PK_GEN  AcPublicKeyMessageRequestAcPKReqMsgType = 10
	AcPublicKeyMessageRequest_PK_ADD  AcPublicKeyMessageRequestAcPKReqMsgType = 11
	AcPublicKeyMessageRequest_PK_LIST AcPublicKeyMessageRequestAcPKReqMsgType = 12
	AcPublicKeyMessageRequest_PK_DEL  AcPublicKeyMessageRequestAcPKReqMsgType = 13
)

var AcPublicKeyMessageRequestAcPKReqMsgType_name = map[int32]string{
	10: "PK_GEN",
	11: "PK_ADD",
	12: "PK_LIST",
	13: "PK_DEL",
}
var AcPublicKeyMessageRequestAcPKReqMsgType_value = map[string]int32{
	"PK_GEN":  10,
	"PK_ADD":  11,
	"PK_LIST": 12,
	"PK_DEL":  13,
}

func (x AcPublicKeyMessageRequestAcPKReqMsgType) Enum() *AcPublicKeyMessageRequestAcPKReqMsgType {
	p := new(AcPublicKeyMessageRequestAcPKReqMsgType)
	*p = x
	return p
}
func (x AcPublicKeyMessageRequestAcPKReqMsgType) String() string {
	return proto.EnumName(AcPublicKeyMessageRequestAcPKReqMsgType_name, int32(x))
}
func (x *AcPublicKeyMessageRequestAcPKReqMsgType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AcPublicKeyMessageRequestAcPKReqMsgType_value, data, "AcPublicKeyMessageRequestAcPKReqMsgType")
	if err != nil {
		return err
	}
	*x = AcPublicKeyMessageRequestAcPKReqMsgType(value)
	return nil
}

type AcPublicKeyMessageResponseAcPKRespMsgType int32

const (
	AcPublicKeyMessageResponse_PKR_GEN  AcPublicKeyMessageResponseAcPKRespMsgType = 0
	AcPublicKeyMessageResponse_PKR_ADD  AcPublicKeyMessageResponseAcPKRespMsgType = 1
	AcPublicKeyMessageResponse_PKR_LIST AcPublicKeyMessageResponseAcPKRespMsgType = 2
	AcPublicKeyMessageResponse_PKR_DEL  AcPublicKeyMessageResponseAcPKRespMsgType = 3
	AcPublicKeyMessageResponse_PKR_ERR  AcPublicKeyMessageResponseAcPKRespMsgType = 4
)

var AcPublicKeyMessageResponseAcPKRespMsgType_name = map[int32]string{
	0: "PKR_GEN",
	1: "PKR_ADD",
	2: "PKR_LIST",
	3: "PKR_DEL",
	4: "PKR_ERR",
}
var AcPublicKeyMessageResponseAcPKRespMsgType_value = map[string]int32{
	"PKR_GEN":  0,
	"PKR_ADD":  1,
	"PKR_LIST": 2,
	"PKR_DEL":  3,
	"PKR_ERR":  4,
}

func (x AcPublicKeyMessageResponseAcPKRespMsgType) Enum() *AcPublicKeyMessageResponseAcPKRespMsgType {
	p := new(AcPublicKeyMessageResponseAcPKRespMsgType)
	*p = x
	return p
}
func (x AcPublicKeyMessageResponseAcPKRespMsgType) String() string {
	return proto.EnumName(AcPublicKeyMessageResponseAcPKRespMsgType_name, int32(x))
}
func (x *AcPublicKeyMessageResponseAcPKRespMsgType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AcPublicKeyMessageResponseAcPKRespMsgType_value, data, "AcPublicKeyMessageResponseAcPKRespMsgType")
	if err != nil {
		return err
	}
	*x = AcPublicKeyMessageResponseAcPKRespMsgType(value)
	return nil
}

type AcKeyExchangeMessageRequestAcKXReqMsgType int32

const (
	AcKeyExchangeMessageRequest_KX_PACK   AcKeyExchangeMessageRequestAcKXReqMsgType = 20
	AcKeyExchangeMessageRequest_KX_UNPACK AcKeyExchangeMessageRequestAcKXReqMsgType = 21
)

var AcKeyExchangeMessageRequestAcKXReqMsgType_name = map[int32]string{
	20: "KX_PACK",
	21: "KX_UNPACK",
}
var AcKeyExchangeMessageRequestAcKXReqMsgType_value = map[string]int32{
	"KX_PACK":   20,
	"KX_UNPACK": 21,
}

func (x AcKeyExchangeMessageRequestAcKXReqMsgType) Enum() *AcKeyExchangeMessageRequestAcKXReqMsgType {
	p := new(AcKeyExchangeMessageRequestAcKXReqMsgType)
	*p = x
	return p
}
func (x AcKeyExchangeMessageRequestAcKXReqMsgType) String() string {
	return proto.EnumName(AcKeyExchangeMessageRequestAcKXReqMsgType_name, int32(x))
}
func (x *AcKeyExchangeMessageRequestAcKXReqMsgType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AcKeyExchangeMessageRequestAcKXReqMsgType_value, data, "AcKeyExchangeMessageRequestAcKXReqMsgType")
	if err != nil {
		return err
	}
	*x = AcKeyExchangeMessageRequestAcKXReqMsgType(value)
	return nil
}

type AcKeyExchangeMessageResponseAcKXRespMsgType int32

const (
	AcKeyExchangeMessageResponse_KXR_PACK   AcKeyExchangeMessageResponseAcKXRespMsgType = 22
	AcKeyExchangeMessageResponse_KXR_UNPACK AcKeyExchangeMessageResponseAcKXRespMsgType = 23
	AcKeyExchangeMessageResponse_KXR_ERR    AcKeyExchangeMessageResponseAcKXRespMsgType = 24
)

var AcKeyExchangeMessageResponseAcKXRespMsgType_name = map[int32]string{
	22: "KXR_PACK",
	23: "KXR_UNPACK",
	24: "KXR_ERR",
}
var AcKeyExchangeMessageResponseAcKXRespMsgType_value = map[string]int32{
	"KXR_PACK":   22,
	"KXR_UNPACK": 23,
	"KXR_ERR":    24,
}

func (x AcKeyExchangeMessageResponseAcKXRespMsgType) Enum() *AcKeyExchangeMessageResponseAcKXRespMsgType {
	p := new(AcKeyExchangeMessageResponseAcKXRespMsgType)
	*p = x
	return p
}
func (x AcKeyExchangeMessageResponseAcKXRespMsgType) String() string {
	return proto.EnumName(AcKeyExchangeMessageResponseAcKXRespMsgType_name, int32(x))
}
func (x *AcKeyExchangeMessageResponseAcKXRespMsgType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AcKeyExchangeMessageResponseAcKXRespMsgType_value, data, "AcKeyExchangeMessageResponseAcKXRespMsgType")
	if err != nil {
		return err
	}
	*x = AcKeyExchangeMessageResponseAcKXRespMsgType(value)
	return nil
}

type AcCipherTextMessageRequestAcCTReqMsgType int32

const (
	AcCipherTextMessageRequest_CT_SEAL AcCipherTextMessageRequestAcCTReqMsgType = 30
	AcCipherTextMessageRequest_CT_OPEN AcCipherTextMessageRequestAcCTReqMsgType = 31
	AcCipherTextMessageRequest_CT_ADD  AcCipherTextMessageRequestAcCTReqMsgType = 32
)

var AcCipherTextMessageRequestAcCTReqMsgType_name = map[int32]string{
	30: "CT_SEAL",
	31: "CT_OPEN",
	32: "CT_ADD",
}
var AcCipherTextMessageRequestAcCTReqMsgType_value = map[string]int32{
	"CT_SEAL": 30,
	"CT_OPEN": 31,
	"CT_ADD":  32,
}

func (x AcCipherTextMessageRequestAcCTReqMsgType) Enum() *AcCipherTextMessageRequestAcCTReqMsgType {
	p := new(AcCipherTextMessageRequestAcCTReqMsgType)
	*p = x
	return p
}
func (x AcCipherTextMessageRequestAcCTReqMsgType) String() string {
	return proto.EnumName(AcCipherTextMessageRequestAcCTReqMsgType_name, int32(x))
}
func (x *AcCipherTextMessageRequestAcCTReqMsgType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AcCipherTextMessageRequestAcCTReqMsgType_value, data, "AcCipherTextMessageRequestAcCTReqMsgType")
	if err != nil {
		return err
	}
	*x = AcCipherTextMessageRequestAcCTReqMsgType(value)
	return nil
}

type AcCipherTextMessageResponseAcCTRespMsgType int32

const (
	AcCipherTextMessageResponse_CTR_SEAL AcCipherTextMessageResponseAcCTRespMsgType = 32
	AcCipherTextMessageResponse_CTR_OPEN AcCipherTextMessageResponseAcCTRespMsgType = 33
	AcCipherTextMessageResponse_CTR_ADD  AcCipherTextMessageResponseAcCTRespMsgType = 34
	AcCipherTextMessageResponse_CTR_ERR  AcCipherTextMessageResponseAcCTRespMsgType = 35
)

var AcCipherTextMessageResponseAcCTRespMsgType_name = map[int32]string{
	32: "CTR_SEAL",
	33: "CTR_OPEN",
	34: "CTR_ADD",
	35: "CTR_ERR",
}
var AcCipherTextMessageResponseAcCTRespMsgType_value = map[string]int32{
	"CTR_SEAL": 32,
	"CTR_OPEN": 33,
	"CTR_ADD":  34,
	"CTR_ERR":  35,
}

func (x AcCipherTextMessageResponseAcCTRespMsgType) Enum() *AcCipherTextMessageResponseAcCTRespMsgType {
	p := new(AcCipherTextMessageResponseAcCTRespMsgType)
	*p = x
	return p
}
func (x AcCipherTextMessageResponseAcCTRespMsgType) String() string {
	return proto.EnumName(AcCipherTextMessageResponseAcCTRespMsgType_name, int32(x))
}
func (x *AcCipherTextMessageResponseAcCTRespMsgType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AcCipherTextMessageResponseAcCTRespMsgType_value, data, "AcCipherTextMessageResponseAcCTRespMsgType")
	if err != nil {
		return err
	}
	*x = AcCipherTextMessageResponseAcCTRespMsgType(value)
	return nil
}

type AcControlMessageRequestAcCTLReqMsgType int32

const (
	AcControlMessageRequest_CTL_PING    AcControlMessageRequestAcCTLReqMsgType = 40
	AcControlMessageRequest_CTL_SAVECTX AcControlMessageRequestAcCTLReqMsgType = 41
	AcControlMessageRequest_CTL_LOADCTX AcControlMessageRequestAcCTLReqMsgType = 42
	AcControlMessageRequest_CTL_VERSION AcControlMessageRequestAcCTLReqMsgType = 43
)

var AcControlMessageRequestAcCTLReqMsgType_name = map[int32]string{
	40: "CTL_PING",
	41: "CTL_SAVECTX",
	42: "CTL_LOADCTX",
	43: "CTL_VERSION",
}
var AcControlMessageRequestAcCTLReqMsgType_value = map[string]int32{
	"CTL_PING":    40,
	"CTL_SAVECTX": 41,
	"CTL_LOADCTX": 42,
	"CTL_VERSION": 43,
}

func (x AcControlMessageRequestAcCTLReqMsgType) Enum() *AcControlMessageRequestAcCTLReqMsgType {
	p := new(AcControlMessageRequestAcCTLReqMsgType)
	*p = x
	return p
}
func (x AcControlMessageRequestAcCTLReqMsgType) String() string {
	return proto.EnumName(AcControlMessageRequestAcCTLReqMsgType_name, int32(x))
}
func (x *AcControlMessageRequestAcCTLReqMsgType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AcControlMessageRequestAcCTLReqMsgType_value, data, "AcControlMessageRequestAcCTLReqMsgType")
	if err != nil {
		return err
	}
	*x = AcControlMessageRequestAcCTLReqMsgType(value)
	return nil
}

type AcControlMessageResponseAcCTLRRespMsgType int32

const (
	AcControlMessageResponse_CTLR_PONG    AcControlMessageResponseAcCTLRRespMsgType = 50
	AcControlMessageResponse_CTLR_SAVECTX AcControlMessageResponseAcCTLRRespMsgType = 51
	AcControlMessageResponse_CTLR_LOADCTX AcControlMessageResponseAcCTLRRespMsgType = 52
	AcControlMessageResponse_CTLR_QUIT    AcControlMessageResponseAcCTLRRespMsgType = 53
)

var AcControlMessageResponseAcCTLRRespMsgType_name = map[int32]string{
	50: "CTLR_PONG",
	51: "CTLR_SAVECTX",
	52: "CTLR_LOADCTX",
	53: "CTLR_QUIT",
}
var AcControlMessageResponseAcCTLRRespMsgType_value = map[string]int32{
	"CTLR_PONG":    50,
	"CTLR_SAVECTX": 51,
	"CTLR_LOADCTX": 52,
	"CTLR_QUIT":    53,
}

func (x AcControlMessageResponseAcCTLRRespMsgType) Enum() *AcControlMessageResponseAcCTLRRespMsgType {
	p := new(AcControlMessageResponseAcCTLRRespMsgType)
	*p = x
	return p
}
func (x AcControlMessageResponseAcCTLRRespMsgType) String() string {
	return proto.EnumName(AcControlMessageResponseAcCTLRRespMsgType_name, int32(x))
}
func (x *AcControlMessageResponseAcCTLRRespMsgType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AcControlMessageResponseAcCTLRRespMsgType_value, data, "AcControlMessageResponseAcCTLRRespMsgType")
	if err != nil {
		return err
	}
	*x = AcControlMessageResponseAcCTLRRespMsgType(value)
	return nil
}

type ArseneCryptoMessageAcMessageType int32

const (
	ArseneCryptoMessage_AC_PK     ArseneCryptoMessageAcMessageType = 20
	ArseneCryptoMessage_AC_KEX    ArseneCryptoMessageAcMessageType = 21
	ArseneCryptoMessage_AC_CRYPTO ArseneCryptoMessageAcMessageType = 22
	ArseneCryptoMessage_AC_CTL    ArseneCryptoMessageAcMessageType = 23
	ArseneCryptoMessage_AC_QUIT   ArseneCryptoMessageAcMessageType = 24
	ArseneCryptoMessage_AC_ERROR  ArseneCryptoMessageAcMessageType = 25
)

var ArseneCryptoMessageAcMessageType_name = map[int32]string{
	20: "AC_PK",
	21: "AC_KEX",
	22: "AC_CRYPTO",
	23: "AC_CTL",
	24: "AC_QUIT",
	25: "AC_ERROR",
}
var ArseneCryptoMessageAcMessageType_value = map[string]int32{
	"AC_PK":     20,
	"AC_KEX":    21,
	"AC_CRYPTO": 22,
	"AC_CTL":    23,
	"AC_QUIT":   24,
	"AC_ERROR":  25,
}

func (x ArseneCryptoMessageAcMessageType) Enum() *ArseneCryptoMessageAcMessageType {
	p := new(ArseneCryptoMessageAcMessageType)
	*p = x
	return p
}
func (x ArseneCryptoMessageAcMessageType) String() string {
	return proto.EnumName(ArseneCryptoMessageAcMessageType_name, int32(x))
}
func (x *ArseneCryptoMessageAcMessageType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ArseneCryptoMessageAcMessageType_value, data, "ArseneCryptoMessageAcMessageType")
	if err != nil {
		return err
	}
	*x = ArseneCryptoMessageAcMessageType(value)
	return nil
}

// PUBLIC KEY // EC25519 DH
// This message handle public key requests:
// PK_GEN: generate an ephemeral public key
// PK_ADD: add an externally received ephemeral public key
// PK_LIST: list currently known ephemeral public key(s)
// PK_DEL: delete a currently stored ephemeral public key
type AcPublicKeyMessageRequest struct {
	Type             *AcPublicKeyMessageRequestAcPKReqMsgType `protobuf:"varint,1,req,name=type,enum=acpb.AcPublicKeyMessageRequestAcPKReqMsgType" json:"type,omitempty"`
	Nick             *string                                  `protobuf:"bytes,2,opt,name=nick" json:"nick,omitempty"`
	Host             *string                                  `protobuf:"bytes,4,opt,name=host" json:"host,omitempty"`
	Server           *string                                  `protobuf:"bytes,5,req,name=server" json:"server,omitempty"`
	Blob             []byte                                   `protobuf:"bytes,3,opt,name=blob" json:"blob,omitempty"`
	XXX_unrecognized []byte                                   `json:"-"`
}

func (m *AcPublicKeyMessageRequest) Reset()         { *m = AcPublicKeyMessageRequest{} }
func (m *AcPublicKeyMessageRequest) String() string { return proto.CompactTextString(m) }
func (*AcPublicKeyMessageRequest) ProtoMessage()    {}

func (m *AcPublicKeyMessageRequest) GetType() AcPublicKeyMessageRequestAcPKReqMsgType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return AcPublicKeyMessageRequest_PK_GEN
}

func (m *AcPublicKeyMessageRequest) GetNick() string {
	if m != nil && m.Nick != nil {
		return *m.Nick
	}
	return ""
}

func (m *AcPublicKeyMessageRequest) GetHost() string {
	if m != nil && m.Host != nil {
		return *m.Host
	}
	return ""
}

func (m *AcPublicKeyMessageRequest) GetServer() string {
	if m != nil && m.Server != nil {
		return *m.Server
	}
	return ""
}

func (m *AcPublicKeyMessageRequest) GetBlob() []byte {
	if m != nil {
		return m.Blob
	}
	return nil
}

type AcPublicKey struct {
	Nick             *string `protobuf:"bytes,1,req,name=nick" json:"nick,omitempty"`
	Fp               []byte  `protobuf:"bytes,2,req,name=fp" json:"fp,omitempty"`
	Timestamp        *int64  `protobuf:"varint,3,req,name=timestamp" json:"timestamp,omitempty"`
	Pubkey           *string `protobuf:"bytes,4,req,name=pubkey" json:"pubkey,omitempty"`
	Haspriv          *bool   `protobuf:"varint,5,req,name=haspriv" json:"haspriv,omitempty"`
	Host             *string `protobuf:"bytes,6,opt,name=host" json:"host,omitempty"`
	Server           *string `protobuf:"bytes,7,opt,name=server" json:"server,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AcPublicKey) Reset()         { *m = AcPublicKey{} }
func (m *AcPublicKey) String() string { return proto.CompactTextString(m) }
func (*AcPublicKey) ProtoMessage()    {}

func (m *AcPublicKey) GetNick() string {
	if m != nil && m.Nick != nil {
		return *m.Nick
	}
	return ""
}

func (m *AcPublicKey) GetFp() []byte {
	if m != nil {
		return m.Fp
	}
	return nil
}

func (m *AcPublicKey) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *AcPublicKey) GetPubkey() string {
	if m != nil && m.Pubkey != nil {
		return *m.Pubkey
	}
	return ""
}

func (m *AcPublicKey) GetHaspriv() bool {
	if m != nil && m.Haspriv != nil {
		return *m.Haspriv
	}
	return false
}

func (m *AcPublicKey) GetHost() string {
	if m != nil && m.Host != nil {
		return *m.Host
	}
	return ""
}

func (m *AcPublicKey) GetServer() string {
	if m != nil && m.Server != nil {
		return *m.Server
	}
	return ""
}

type AcPublicKeyMessageResponse struct {
	Type             *AcPublicKeyMessageResponseAcPKRespMsgType `protobuf:"varint,1,req,name=type,enum=acpb.AcPublicKeyMessageResponseAcPKRespMsgType" json:"type,omitempty"`
	Bada             *bool                                      `protobuf:"varint,2,req,name=bada" json:"bada,omitempty"`
	ErrorCode        *int32                                     `protobuf:"zigzag32,3,opt,name=error_code" json:"error_code,omitempty"`
	Blob             []byte                                     `protobuf:"bytes,4,opt,name=blob" json:"blob,omitempty"`
	PublicKeys       []*AcPublicKey                             `protobuf:"bytes,5,rep,name=public_keys" json:"public_keys,omitempty"`
	XXX_unrecognized []byte                                     `json:"-"`
}

func (m *AcPublicKeyMessageResponse) Reset()         { *m = AcPublicKeyMessageResponse{} }
func (m *AcPublicKeyMessageResponse) String() string { return proto.CompactTextString(m) }
func (*AcPublicKeyMessageResponse) ProtoMessage()    {}

func (m *AcPublicKeyMessageResponse) GetType() AcPublicKeyMessageResponseAcPKRespMsgType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return AcPublicKeyMessageResponse_PKR_GEN
}

func (m *AcPublicKeyMessageResponse) GetBada() bool {
	if m != nil && m.Bada != nil {
		return *m.Bada
	}
	return false
}

func (m *AcPublicKeyMessageResponse) GetErrorCode() int32 {
	if m != nil && m.ErrorCode != nil {
		return *m.ErrorCode
	}
	return 0
}

func (m *AcPublicKeyMessageResponse) GetBlob() []byte {
	if m != nil {
		return m.Blob
	}
	return nil
}

func (m *AcPublicKeyMessageResponse) GetPublicKeys() []*AcPublicKey {
	if m != nil {
		return m.PublicKeys
	}
	return nil
}

//
//
//
// Key EXchange messages
//
//
//
type AcKeyExchangeMessageRequest struct {
	Type             *AcKeyExchangeMessageRequestAcKXReqMsgType `protobuf:"varint,1,req,name=type,enum=acpb.AcKeyExchangeMessageRequestAcKXReqMsgType" json:"type,omitempty"`
	Mynick           *string                                    `protobuf:"bytes,2,req,name=mynick" json:"mynick,omitempty"`
	Peernick         *string                                    `protobuf:"bytes,3,req,name=peernick" json:"peernick,omitempty"`
	Channel          *string                                    `protobuf:"bytes,4,req,name=channel" json:"channel,omitempty"`
	Server           *string                                    `protobuf:"bytes,5,req,name=server" json:"server,omitempty"`
	Blob             []byte                                     `protobuf:"bytes,6,opt,name=blob" json:"blob,omitempty"`
	XXX_unrecognized []byte                                     `json:"-"`
}

func (m *AcKeyExchangeMessageRequest) Reset()         { *m = AcKeyExchangeMessageRequest{} }
func (m *AcKeyExchangeMessageRequest) String() string { return proto.CompactTextString(m) }
func (*AcKeyExchangeMessageRequest) ProtoMessage()    {}

func (m *AcKeyExchangeMessageRequest) GetType() AcKeyExchangeMessageRequestAcKXReqMsgType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return AcKeyExchangeMessageRequest_KX_PACK
}

func (m *AcKeyExchangeMessageRequest) GetMynick() string {
	if m != nil && m.Mynick != nil {
		return *m.Mynick
	}
	return ""
}

func (m *AcKeyExchangeMessageRequest) GetPeernick() string {
	if m != nil && m.Peernick != nil {
		return *m.Peernick
	}
	return ""
}

func (m *AcKeyExchangeMessageRequest) GetChannel() string {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return ""
}

func (m *AcKeyExchangeMessageRequest) GetServer() string {
	if m != nil && m.Server != nil {
		return *m.Server
	}
	return ""
}

func (m *AcKeyExchangeMessageRequest) GetBlob() []byte {
	if m != nil {
		return m.Blob
	}
	return nil
}

type AcKeyExchangeMessageResponse struct {
	Type             *AcKeyExchangeMessageResponseAcKXRespMsgType `protobuf:"varint,1,req,name=type,enum=acpb.AcKeyExchangeMessageResponseAcKXRespMsgType" json:"type,omitempty"`
	Bada             *bool                                        `protobuf:"varint,2,req,name=bada" json:"bada,omitempty"`
	ErrorCode        *int32                                       `protobuf:"zigzag32,6,req,name=error_code" json:"error_code,omitempty"`
	Blob             []byte                                       `protobuf:"bytes,5,opt,name=blob" json:"blob,omitempty"`
	Nonce            *uint32                                      `protobuf:"varint,7,opt,name=nonce" json:"nonce,omitempty"`
	XXX_unrecognized []byte                                       `json:"-"`
}

func (m *AcKeyExchangeMessageResponse) Reset()         { *m = AcKeyExchangeMessageResponse{} }
func (m *AcKeyExchangeMessageResponse) String() string { return proto.CompactTextString(m) }
func (*AcKeyExchangeMessageResponse) ProtoMessage()    {}

func (m *AcKeyExchangeMessageResponse) GetType() AcKeyExchangeMessageResponseAcKXRespMsgType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return AcKeyExchangeMessageResponse_KXR_PACK
}

func (m *AcKeyExchangeMessageResponse) GetBada() bool {
	if m != nil && m.Bada != nil {
		return *m.Bada
	}
	return false
}

func (m *AcKeyExchangeMessageResponse) GetErrorCode() int32 {
	if m != nil && m.ErrorCode != nil {
		return *m.ErrorCode
	}
	return 0
}

func (m *AcKeyExchangeMessageResponse) GetBlob() []byte {
	if m != nil {
		return m.Blob
	}
	return nil
}

func (m *AcKeyExchangeMessageResponse) GetNonce() uint32 {
	if m != nil && m.Nonce != nil {
		return *m.Nonce
	}
	return 0
}

//
//
//
// Crypto Message
//
//
//
type AcCipherTextMessageRequest struct {
	Type             *AcCipherTextMessageRequestAcCTReqMsgType `protobuf:"varint,1,req,name=type,enum=acpb.AcCipherTextMessageRequestAcCTReqMsgType" json:"type,omitempty"`
	Nick             *string                                   `protobuf:"bytes,2,req,name=nick" json:"nick,omitempty"`
	Channel          *string                                   `protobuf:"bytes,3,req,name=channel" json:"channel,omitempty"`
	Server           *string                                   `protobuf:"bytes,4,req,name=server" json:"server,omitempty"`
	Blob             []byte                                    `protobuf:"bytes,5,req,name=blob" json:"blob,omitempty"`
	Opt              *string                                   `protobuf:"bytes,6,opt,name=opt" json:"opt,omitempty"`
	XXX_unrecognized []byte                                    `json:"-"`
}

func (m *AcCipherTextMessageRequest) Reset()         { *m = AcCipherTextMessageRequest{} }
func (m *AcCipherTextMessageRequest) String() string { return proto.CompactTextString(m) }
func (*AcCipherTextMessageRequest) ProtoMessage()    {}

func (m *AcCipherTextMessageRequest) GetType() AcCipherTextMessageRequestAcCTReqMsgType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return AcCipherTextMessageRequest_CT_SEAL
}

func (m *AcCipherTextMessageRequest) GetNick() string {
	if m != nil && m.Nick != nil {
		return *m.Nick
	}
	return ""
}

func (m *AcCipherTextMessageRequest) GetChannel() string {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return ""
}

func (m *AcCipherTextMessageRequest) GetServer() string {
	if m != nil && m.Server != nil {
		return *m.Server
	}
	return ""
}

func (m *AcCipherTextMessageRequest) GetBlob() []byte {
	if m != nil {
		return m.Blob
	}
	return nil
}

func (m *AcCipherTextMessageRequest) GetOpt() string {
	if m != nil && m.Opt != nil {
		return *m.Opt
	}
	return ""
}

type AcCipherTextMessageResponse struct {
	Type             *AcCipherTextMessageResponseAcCTRespMsgType `protobuf:"varint,1,req,name=type,enum=acpb.AcCipherTextMessageResponseAcCTRespMsgType" json:"type,omitempty"`
	Bada             *bool                                       `protobuf:"varint,2,req,name=bada" json:"bada,omitempty"`
	Blob             [][]byte                                    `protobuf:"bytes,5,rep,name=blob" json:"blob,omitempty"`
	ErrorCode        *int32                                      `protobuf:"zigzag32,6,opt,name=error_code" json:"error_code,omitempty"`
	Nonce            *uint32                                     `protobuf:"varint,7,opt,name=nonce" json:"nonce,omitempty"`
	XXX_unrecognized []byte                                      `json:"-"`
}

func (m *AcCipherTextMessageResponse) Reset()         { *m = AcCipherTextMessageResponse{} }
func (m *AcCipherTextMessageResponse) String() string { return proto.CompactTextString(m) }
func (*AcCipherTextMessageResponse) ProtoMessage()    {}

func (m *AcCipherTextMessageResponse) GetType() AcCipherTextMessageResponseAcCTRespMsgType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return AcCipherTextMessageResponse_CTR_SEAL
}

func (m *AcCipherTextMessageResponse) GetBada() bool {
	if m != nil && m.Bada != nil {
		return *m.Bada
	}
	return false
}

func (m *AcCipherTextMessageResponse) GetBlob() [][]byte {
	if m != nil {
		return m.Blob
	}
	return nil
}

func (m *AcCipherTextMessageResponse) GetErrorCode() int32 {
	if m != nil && m.ErrorCode != nil {
		return *m.ErrorCode
	}
	return 0
}

func (m *AcCipherTextMessageResponse) GetNonce() uint32 {
	if m != nil && m.Nonce != nil {
		return *m.Nonce
	}
	return 0
}

//
//
//
// Control Message
//
//
//
type AcControlMessageRequest struct {
	Type             *AcControlMessageRequestAcCTLReqMsgType `protobuf:"varint,1,req,name=type,enum=acpb.AcControlMessageRequestAcCTLReqMsgType" json:"type,omitempty"`
	Timestamp        *int64                                  `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Filename         *string                                 `protobuf:"bytes,2,opt,name=filename" json:"filename,omitempty"`
	Savepass         *string                                 `protobuf:"bytes,4,opt,name=savepass" json:"savepass,omitempty"`
	XXX_unrecognized []byte                                  `json:"-"`
}

func (m *AcControlMessageRequest) Reset()         { *m = AcControlMessageRequest{} }
func (m *AcControlMessageRequest) String() string { return proto.CompactTextString(m) }
func (*AcControlMessageRequest) ProtoMessage()    {}

func (m *AcControlMessageRequest) GetType() AcControlMessageRequestAcCTLReqMsgType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return AcControlMessageRequest_CTL_PING
}

func (m *AcControlMessageRequest) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *AcControlMessageRequest) GetFilename() string {
	if m != nil && m.Filename != nil {
		return *m.Filename
	}
	return ""
}

func (m *AcControlMessageRequest) GetSavepass() string {
	if m != nil && m.Savepass != nil {
		return *m.Savepass
	}
	return ""
}

type AcControlMessageResponse struct {
	Type             *AcControlMessageResponseAcCTLRRespMsgType `protobuf:"varint,1,req,name=type,enum=acpb.AcControlMessageResponseAcCTLRRespMsgType" json:"type,omitempty"`
	Bada             *bool                                      `protobuf:"varint,2,req,name=bada" json:"bada,omitempty"`
	ErrorCode        *int32                                     `protobuf:"zigzag32,3,opt,name=error_code" json:"error_code,omitempty"`
	Timestamp        *int64                                     `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	XXX_unrecognized []byte                                     `json:"-"`
}

func (m *AcControlMessageResponse) Reset()         { *m = AcControlMessageResponse{} }
func (m *AcControlMessageResponse) String() string { return proto.CompactTextString(m) }
func (*AcControlMessageResponse) ProtoMessage()    {}

func (m *AcControlMessageResponse) GetType() AcControlMessageResponseAcCTLRRespMsgType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return AcControlMessageResponse_CTLR_PONG
}

func (m *AcControlMessageResponse) GetBada() bool {
	if m != nil && m.Bada != nil {
		return *m.Bada
	}
	return false
}

func (m *AcControlMessageResponse) GetErrorCode() int32 {
	if m != nil && m.ErrorCode != nil {
		return *m.ErrorCode
	}
	return 0
}

func (m *AcControlMessageResponse) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

//
//
// The enveloppe Type
//
//
type ArseneCryptoMessage struct {
	Type             *ArseneCryptoMessageAcMessageType `protobuf:"varint,40,req,name=type,enum=acpb.ArseneCryptoMessageAcMessageType" json:"type,omitempty"`
	Blob             []byte                            `protobuf:"bytes,41,req,name=blob" json:"blob,omitempty"`
	XXX_unrecognized []byte                            `json:"-"`
}

func (m *ArseneCryptoMessage) Reset()         { *m = ArseneCryptoMessage{} }
func (m *ArseneCryptoMessage) String() string { return proto.CompactTextString(m) }
func (*ArseneCryptoMessage) ProtoMessage()    {}

func (m *ArseneCryptoMessage) GetType() ArseneCryptoMessageAcMessageType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ArseneCryptoMessage_AC_PK
}

func (m *ArseneCryptoMessage) GetBlob() []byte {
	if m != nil {
		return m.Blob
	}
	return nil
}

func init() {
	proto.RegisterEnum("acpb.AcPublicKeyMessageRequestAcPKReqMsgType", AcPublicKeyMessageRequestAcPKReqMsgType_name, AcPublicKeyMessageRequestAcPKReqMsgType_value)
	proto.RegisterEnum("acpb.AcPublicKeyMessageResponseAcPKRespMsgType", AcPublicKeyMessageResponseAcPKRespMsgType_name, AcPublicKeyMessageResponseAcPKRespMsgType_value)
	proto.RegisterEnum("acpb.AcKeyExchangeMessageRequestAcKXReqMsgType", AcKeyExchangeMessageRequestAcKXReqMsgType_name, AcKeyExchangeMessageRequestAcKXReqMsgType_value)
	proto.RegisterEnum("acpb.AcKeyExchangeMessageResponseAcKXRespMsgType", AcKeyExchangeMessageResponseAcKXRespMsgType_name, AcKeyExchangeMessageResponseAcKXRespMsgType_value)
	proto.RegisterEnum("acpb.AcCipherTextMessageRequestAcCTReqMsgType", AcCipherTextMessageRequestAcCTReqMsgType_name, AcCipherTextMessageRequestAcCTReqMsgType_value)
	proto.RegisterEnum("acpb.AcCipherTextMessageResponseAcCTRespMsgType", AcCipherTextMessageResponseAcCTRespMsgType_name, AcCipherTextMessageResponseAcCTRespMsgType_value)
	proto.RegisterEnum("acpb.AcControlMessageRequestAcCTLReqMsgType", AcControlMessageRequestAcCTLReqMsgType_name, AcControlMessageRequestAcCTLReqMsgType_value)
	proto.RegisterEnum("acpb.AcControlMessageResponseAcCTLRRespMsgType", AcControlMessageResponseAcCTLRRespMsgType_name, AcControlMessageResponseAcCTLRRespMsgType_value)
	proto.RegisterEnum("acpb.ArseneCryptoMessageAcMessageType", ArseneCryptoMessageAcMessageType_name, ArseneCryptoMessageAcMessageType_value)
}
